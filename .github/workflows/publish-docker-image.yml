name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish even from non-main branch'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set lowercase image name
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Jenkins Agent with SSH Transfer Extensions
            org.opencontainers.image.description=Jenkins agent with runtime SSH keyscan capabilities
            org.opencontainers.image.vendor=3wr
            org.opencontainers.image.source=https://github.com/${{ env.IMAGE_NAME }}        

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Extract the first tag from the metadata output for testing
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $FIRST_TAG"

          # Run basic functionality test using the locally built image
          echo "Testing default configuration..."
          docker run --rm "$FIRST_TAG" bash -c "
            # Check if SSH keyscan setup ran
            test -f /home/jenkins/.ssh/known_hosts || exit 1

            # Check for always-scanned hostnames
            ssh-keygen -F github.com -f /home/jenkins/.ssh/known_hosts > /dev/null || exit 1
            ssh-keygen -F gitlab.com -f /home/jenkins/.ssh/known_hosts > /dev/null || exit 1
            ssh-keygen -F bitbucket.org -f /home/jenkins/.ssh/known_hosts > /dev/null || exit 1

            echo 'Basic functionality test passed!'
          "

          echo "Testing custom hostnames..."
          docker run --rm -e HOSTNAMES_TO_SCAN_1="git.example.com" "$FIRST_TAG" bash -c "
            # Always-scanned hosts should still be present
            ssh-keygen -F github.com -f /home/jenkins/.ssh/known_hosts > /dev/null || exit 1
            echo 'Custom hostname test passed!'
          "

      - name: Update package visibility
        if: github.event_name != 'pull_request'
        run: |
          # Wait a moment for the package to be fully available
          sleep 10

          # Extract package name (remove owner prefix for API)
          PACKAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | cut -d'/' -f2)
          OWNER=$(echo "${{ env.IMAGE_NAME }}" | cut -d'/' -f1)

          echo "Attempting to make package public:"
          echo "  Owner: $OWNER"
          echo "  Package: $PACKAGE_NAME"
          echo "  Full name: ${{ env.IMAGE_NAME }}"

          # Try to get package info first to see if it exists
          echo "Checking if package exists..."
          PACKAGE_EXISTS=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/$OWNER/packages/container/$PACKAGE_NAME" \
            | jq -r '.name // empty' 2>/dev/null || echo "")

          if [ -z "$PACKAGE_EXISTS" ]; then
            echo "Package not found via org API, trying user API..."
            PACKAGE_EXISTS=$(curl -s -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/users/$OWNER/packages/container/$PACKAGE_NAME" \
              | jq -r '.name // empty' 2>/dev/null || echo "")
          fi

          if [ -n "$PACKAGE_EXISTS" ]; then
            echo "Package found, attempting to update visibility..."

            # Try org endpoint first
            if curl -s -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/orgs/$OWNER/packages/container/$PACKAGE_NAME" \
              -d '{"visibility":"public"}' | grep -q "public"; then
              echo "Successfully updated package visibility to public (org endpoint)"
            elif curl -s -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/users/$OWNER/packages/container/$PACKAGE_NAME" \
              -d '{"visibility":"public"}' | grep -q "public"; then
              echo "Successfully updated package visibility to public (user endpoint)"
            else
              echo "Failed to update package visibility, but this may not be critical"
            fi
          else
            echo "Package not found yet, it may take some time to appear in the API"
            echo "The package will be created as public by default when first accessed"
          fi

      - name: Generate summary
        if: always()
        run: |
          # Process tags to make them table-friendly (replace newlines with commas)
          PROCESSED_TAGS=$(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ',' | sed 's/,$//')

          echo "## Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Registry | \`${{ env.REGISTRY }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Image | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Pushed | ${{ github.event_name != 'pull_request' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags Built" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY