name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      force_publish:
        description: 'Force publish even from non-main branch'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set lowercase image name.
        run: echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch full history for version calculation

      - name: Generate version number
        id: version
        run: |
          # Get the current date in YYYY.MM.DD format
          DATE_VERSION=$(date +'%Y.%m.%d')

          # Get number of commits today to create unique build number
          COMMITS_TODAY=$(git log --since="today 00:00:00" --oneline | wc -l)
          BUILD_NUMBER=$((COMMITS_TODAY))

          # Create version: YYYY.MM.DD.BUILD
          VERSION="${DATE_VERSION}.${BUILD_NUMBER}"

          echo "Generated version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "date_version=$DATE_VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Specific version with date and build number
            type=raw,value=${{ steps.version.outputs.version }}
            # Latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Semver tags only for actual releases (when tags like v1.0.0 are pushed)
            type=semver,pattern={{version}}
          labels: |
            org.opencontainers.image.title=Jenkins Agent with SSH Transfer Extensions
            org.opencontainers.image.description=Jenkins agent with runtime SSH keyscan capabilities
            org.opencontainers.image.vendor=3wr
            org.opencontainers.image.source=https://github.com/${{ env.IMAGE_NAME }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}        

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Extract the first tag from the metadata output for testing
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $FIRST_TAG"

          # Run basic functionality test using the locally built image
          echo "Testing default configuration..."
          docker run --rm "$FIRST_TAG" bash -c "
            # Check if SSH keyscan setup ran
            test -f /home/jenkins/.ssh/known_hosts || exit 1

            # Check for always-scanned hostnames
            ssh-keygen -F github.com -f /home/jenkins/.ssh/known_hosts > /dev/null || exit 1
            ssh-keygen -F gitlab.com -f /home/jenkins/.ssh/known_hosts > /dev/null || exit 1
            ssh-keygen -F bitbucket.org -f /home/jenkins/.ssh/known_hosts > /dev/null || exit 1

            echo 'Basic functionality test passed!'
          "

          echo "Testing custom hostnames..."
          docker run --rm -e HOSTNAMES_TO_SCAN_1="git.example.com" "$FIRST_TAG" bash -c "
            # Always-scanned hosts should still be present
            ssh-keygen -F github.com -f /home/jenkins/.ssh/known_hosts > /dev/null || exit 1
            echo 'Custom hostname test passed!'
          "

      - name: Update package visibility
        if: github.event_name != 'pull_request'
        run: |
          # Wait a moment for the package to be fully available
          sleep 10

          # Extract package name (remove owner prefix for API)
          PACKAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | cut -d'/' -f2)
          OWNER=$(echo "${{ env.IMAGE_NAME }}" | cut -d'/' -f1)

          echo "Attempting to make personal repository package public:"
          echo "  Owner: $OWNER"
          echo "  Package: $PACKAGE_NAME"
          echo "  Full name: ${{ env.IMAGE_NAME }}"

          # For personal repositories, use the user API endpoint
          echo "Checking if package exists (personal repo)..."
          PACKAGE_INFO=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/users/$OWNER/packages/container/$PACKAGE_NAME" 2>/dev/null || echo "")

          if echo "$PACKAGE_INFO" | jq -e '.name' >/dev/null 2>&1; then
            echo "Package found, checking current visibility..."
            CURRENT_VISIBILITY=$(echo "$PACKAGE_INFO" | jq -r '.visibility // "unknown"')
            echo "Current visibility: $CURRENT_VISIBILITY"

            if [ "$CURRENT_VISIBILITY" = "public" ]; then
              echo "Package is already public, no action needed"
            else
              echo "Attempting to update visibility to public..."
              UPDATE_RESULT=$(curl -s -X PATCH \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/users/$OWNER/packages/container/$PACKAGE_NAME" \
                -d '{"visibility":"public"}' 2>/dev/null || echo "")

              if echo "$UPDATE_RESULT" | jq -e '.visibility' >/dev/null 2>&1; then
                NEW_VISIBILITY=$(echo "$UPDATE_RESULT" | jq -r '.visibility')
                echo "Successfully updated package visibility to: $NEW_VISIBILITY"
              else
                echo "Update may have failed, but this is often not critical for personal repositories"
                echo "Personal repository packages are typically accessible by default"
              fi
            fi
          else
            echo "Package not found yet in GitHub API"
            echo "This is normal - packages may take time to appear in the API after first push"
            echo "Personal repository packages are typically public by default once created"
          fi

      - name: Generate summary
        if: always()
        run: |
          echo "## Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Registry | \`${{ env.REGISTRY }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Image | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Version | \`${{ steps.version.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Number | \`${{ steps.version.outputs.build_number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Pushed | ${{ github.event_name != 'pull_request' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags Built" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage Examples" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Use latest version" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Use specific version" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run with custom hostnames" >> $GITHUB_STEP_SUMMARY
          echo "docker run -e HOSTNAMES_TO_SCAN_1=\"git.company.com\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY